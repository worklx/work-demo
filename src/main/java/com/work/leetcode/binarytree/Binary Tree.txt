二叉树

深度优先遍历：
对每一个可能的分支路径深入到不能再深入为止，而且每个结点只能访问一次。
要特别注意的是，二叉树的深度优先遍历又可以细分为先序遍历、中序遍历、后序遍历：
先序遍历：对任一子树，先访问根，然后遍历其左子树，最后遍历其右子树。
中序遍历：对任一子树，先遍历其左子树，然后访问根，最后遍历其右子树。
后序遍历：对任一子树，先遍历其左子树，然后遍历其右子树，最后访问根。

广度优先遍历：
又叫层次遍历，从上往下对每一层依次访问，在每一层中，从左往右（也可以从右往左）访问结点，访问完一层就进入下一层，直到没有结点可以访问为止。

二叉树遍历：
LeetCode 94. 二叉树的中序遍历
LeetCode 144. 二叉树的前序遍历
LeetCode 145. 二叉树的后序遍历

二叉树高度：
LeetCode 104. 计算二叉树的最大深度
LeetCode 111. 计算二叉树的最小深度

二叉树比较：
LeetCode 100. 相同的树
LeetCode 101. 对称二叉树
LeetCode 110. 判断二叉树是否是高度平衡二叉树

构造二叉树：
LeetCode 108. 将有序数字转换为二叉搜索树
LeetCode 226. 翻转二叉树
LeetCode 654. 构造最大二叉树
LeetCode 105. 从前序与中序遍历序列构造二叉树
LeetCode 106. 从中序与后序遍历序列构造二叉树
LeetCode 889. 从前序序与后序遍历序列构造二叉树

二叉树路径：
LeetCode 112. 二叉树的路径总和

二叉树直径：
LeetCode 543. 二叉树的直径


其他：
LeetCode 114. 将二叉树展开为链表
LeetCode 116. 完美二叉树，填充每个节点的下一个右侧指针
LeetCode 404. 二叉树的左叶子之和



labuladong 二叉树刷题顺序
LeetCode 226. 翻转二叉树
LeetCode 114. 将二叉树展开为链表
LeetCode 116. 完美二叉树，填充每个节点的下一个右侧指针

LeetCode 654. 构造最大二叉树
LeetCode 105. 从前序与中序遍历序列构造二叉树
LeetCode 106. 从中序与后序遍历序列构造二叉树
LeetCode 889. 从前序序与后序遍历序列构造二叉树

遍历思维：当前节点需要做什么
分解思维：应用于构造二叉树，构造二叉树 = 构造根节点 + 构造左子树 + 构造右子树

算法框架1：
public boolean doSomething(TreeNode node....) {
    // 节点需要做什么？
    // 左子树需要做什么？
    // 右子树需要做什么？
}

